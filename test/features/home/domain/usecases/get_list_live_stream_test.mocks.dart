// Mocks generated by Mockito 5.3.0 from annotations
// in streamskit_mobile/test/features/home/domain/usecases/get_list_live_stream_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:ui' as _i2;

import 'package:mockito/mockito.dart' as _i1;
import 'package:streamskit_mobile/features/home/data/model/live_stream_model.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeColor_0 extends _i1.SmartFake implements _i2.Color {
  _FakeColor_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLiveStreamModel_1 extends _i1.SmartFake
    implements _i3.LiveStreamModel {
  _FakeLiveStreamModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LiveStreamModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockLiveStreamModel extends _i1.Mock implements _i3.LiveStreamModel {
  MockLiveStreamModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get peopleParticipant => (super.noSuchMethod(
        Invocation.getter(#peopleParticipant),
        returnValue: 0,
      ) as int);
  @override
  int get type => (super.noSuchMethod(
        Invocation.getter(#type),
        returnValue: 0,
      ) as int);
  @override
  String get urlToImage => (super.noSuchMethod(
        Invocation.getter(#urlToImage),
        returnValue: '',
      ) as String);
  @override
  String get getTitleType => (super.noSuchMethod(
        Invocation.getter(#getTitleType),
        returnValue: '',
      ) as String);
  @override
  _i2.Color get getColorType => (super.noSuchMethod(
        Invocation.getter(#getColorType),
        returnValue: _FakeColor_0(
          this,
          Invocation.getter(#getColorType),
        ),
      ) as _i2.Color);
  @override
  _i3.LiveStreamModel copyWith({
    int? peopleParticipant,
    int? type,
    String? urlToImage,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyWith,
          [],
          {
            #peopleParticipant: peopleParticipant,
            #type: type,
            #urlToImage: urlToImage,
          },
        ),
        returnValue: _FakeLiveStreamModel_1(
          this,
          Invocation.method(
            #copyWith,
            [],
            {
              #peopleParticipant: peopleParticipant,
              #type: type,
              #urlToImage: urlToImage,
            },
          ),
        ),
      ) as _i3.LiveStreamModel);
  @override
  Map<String, dynamic> toMap() => (super.noSuchMethod(
        Invocation.method(
          #toMap,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
  @override
  String toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: '',
      ) as String);
}
